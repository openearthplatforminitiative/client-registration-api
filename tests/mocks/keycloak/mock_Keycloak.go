// Code generated by mockery v2.46.3. DO NOT EDIT.

package keycloak

import (
	models "github.com/openearthplatforminitiative/client-registration-api/models"
	mock "github.com/stretchr/testify/mock"
)

// MockKeycloak is an autogenerated mock type for the Keycloak type
type MockKeycloak struct {
	mock.Mock
}

type MockKeycloak_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeycloak) EXPECT() *MockKeycloak_Expecter {
	return &MockKeycloak_Expecter{mock: &_m.Mock}
}

// AddClient provides a mock function with given fields: client
func (_m *MockKeycloak) AddClient(client *models.Client) (*models.Client, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for AddClient")
	}

	var r0 *models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Client) (*models.Client, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*models.Client) *models.Client); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloak_AddClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddClient'
type MockKeycloak_AddClient_Call struct {
	*mock.Call
}

// AddClient is a helper method to define mock.On call
//   - client *models.Client
func (_e *MockKeycloak_Expecter) AddClient(client interface{}) *MockKeycloak_AddClient_Call {
	return &MockKeycloak_AddClient_Call{Call: _e.mock.On("AddClient", client)}
}

func (_c *MockKeycloak_AddClient_Call) Run(run func(client *models.Client)) *MockKeycloak_AddClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Client))
	})
	return _c
}

func (_c *MockKeycloak_AddClient_Call) Return(_a0 *models.Client, _a1 error) *MockKeycloak_AddClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloak_AddClient_Call) RunAndReturn(run func(*models.Client) (*models.Client, error)) *MockKeycloak_AddClient_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteClient provides a mock function with given fields: username, id
func (_m *MockKeycloak) DeleteClient(username string, id string) error {
	ret := _m.Called(username, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockKeycloak_DeleteClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteClient'
type MockKeycloak_DeleteClient_Call struct {
	*mock.Call
}

// DeleteClient is a helper method to define mock.On call
//   - username string
//   - id string
func (_e *MockKeycloak_Expecter) DeleteClient(username interface{}, id interface{}) *MockKeycloak_DeleteClient_Call {
	return &MockKeycloak_DeleteClient_Call{Call: _e.mock.On("DeleteClient", username, id)}
}

func (_c *MockKeycloak_DeleteClient_Call) Run(run func(username string, id string)) *MockKeycloak_DeleteClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockKeycloak_DeleteClient_Call) Return(_a0 error) *MockKeycloak_DeleteClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeycloak_DeleteClient_Call) RunAndReturn(run func(string, string) error) *MockKeycloak_DeleteClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetClient provides a mock function with given fields: username, id
func (_m *MockKeycloak) GetClient(username string, id string) (*models.Client, error) {
	ret := _m.Called(username, id)

	if len(ret) == 0 {
		panic("no return value specified for GetClient")
	}

	var r0 *models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Client, error)); ok {
		return rf(username, id)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Client); ok {
		r0 = rf(username, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloak_GetClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClient'
type MockKeycloak_GetClient_Call struct {
	*mock.Call
}

// GetClient is a helper method to define mock.On call
//   - username string
//   - id string
func (_e *MockKeycloak_Expecter) GetClient(username interface{}, id interface{}) *MockKeycloak_GetClient_Call {
	return &MockKeycloak_GetClient_Call{Call: _e.mock.On("GetClient", username, id)}
}

func (_c *MockKeycloak_GetClient_Call) Run(run func(username string, id string)) *MockKeycloak_GetClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockKeycloak_GetClient_Call) Return(_a0 *models.Client, _a1 error) *MockKeycloak_GetClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloak_GetClient_Call) RunAndReturn(run func(string, string) (*models.Client, error)) *MockKeycloak_GetClient_Call {
	_c.Call.Return(run)
	return _c
}

// GetClients provides a mock function with given fields: UserName
func (_m *MockKeycloak) GetClients(UserName string) (*models.Clients, error) {
	ret := _m.Called(UserName)

	if len(ret) == 0 {
		panic("no return value specified for GetClients")
	}

	var r0 *models.Clients
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Clients, error)); ok {
		return rf(UserName)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Clients); ok {
		r0 = rf(UserName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Clients)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(UserName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloak_GetClients_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClients'
type MockKeycloak_GetClients_Call struct {
	*mock.Call
}

// GetClients is a helper method to define mock.On call
//   - UserName string
func (_e *MockKeycloak_Expecter) GetClients(UserName interface{}) *MockKeycloak_GetClients_Call {
	return &MockKeycloak_GetClients_Call{Call: _e.mock.On("GetClients", UserName)}
}

func (_c *MockKeycloak_GetClients_Call) Run(run func(UserName string)) *MockKeycloak_GetClients_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockKeycloak_GetClients_Call) Return(_a0 *models.Clients, _a1 error) *MockKeycloak_GetClients_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloak_GetClients_Call) RunAndReturn(run func(string) (*models.Clients, error)) *MockKeycloak_GetClients_Call {
	_c.Call.Return(run)
	return _c
}

// GetUrl provides a mock function with given fields:
func (_m *MockKeycloak) GetUrl() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUrl")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockKeycloak_GetUrl_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUrl'
type MockKeycloak_GetUrl_Call struct {
	*mock.Call
}

// GetUrl is a helper method to define mock.On call
func (_e *MockKeycloak_Expecter) GetUrl() *MockKeycloak_GetUrl_Call {
	return &MockKeycloak_GetUrl_Call{Call: _e.mock.On("GetUrl")}
}

func (_c *MockKeycloak_GetUrl_Call) Run(run func()) *MockKeycloak_GetUrl_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockKeycloak_GetUrl_Call) Return(_a0 string) *MockKeycloak_GetUrl_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockKeycloak_GetUrl_Call) RunAndReturn(run func() string) *MockKeycloak_GetUrl_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateClient provides a mock function with given fields: client
func (_m *MockKeycloak) UpdateClient(client *models.Client) (*models.Client, error) {
	ret := _m.Called(client)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 *models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Client) (*models.Client, error)); ok {
		return rf(client)
	}
	if rf, ok := ret.Get(0).(func(*models.Client) *models.Client); ok {
		r0 = rf(client)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Client) error); ok {
		r1 = rf(client)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeycloak_UpdateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateClient'
type MockKeycloak_UpdateClient_Call struct {
	*mock.Call
}

// UpdateClient is a helper method to define mock.On call
//   - client *models.Client
func (_e *MockKeycloak_Expecter) UpdateClient(client interface{}) *MockKeycloak_UpdateClient_Call {
	return &MockKeycloak_UpdateClient_Call{Call: _e.mock.On("UpdateClient", client)}
}

func (_c *MockKeycloak_UpdateClient_Call) Run(run func(client *models.Client)) *MockKeycloak_UpdateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*models.Client))
	})
	return _c
}

func (_c *MockKeycloak_UpdateClient_Call) Return(_a0 *models.Client, _a1 error) *MockKeycloak_UpdateClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeycloak_UpdateClient_Call) RunAndReturn(run func(*models.Client) (*models.Client, error)) *MockKeycloak_UpdateClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeycloak creates a new instance of MockKeycloak. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeycloak(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeycloak {
	mock := &MockKeycloak{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
